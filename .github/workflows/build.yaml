name: Build OpenWrt

on:
  workflow_dispatch:

env:
  BASE_CONFIG: config.ext-upd-1.0
  APPEND_CONFIG: config.alryaz
  OWRT_COMMIT_HASH: 68bf4844a1cbc9f404f6e93b70a2657e74f1dce9
  MTK_COMMIT_HASH: 42df09d4cf568c795e71427668fae0eea4f112c5

jobs:
  check-cache:
    runs-on: ubuntu-22.04
    outputs:
      buildroot: ${{ steps.caching_keys.outputs.buildroot }}
      cloned-mtk: ${{ steps.caching_keys.outputs.cloned-mtk }}
      cloned-owrt: ${{ steps.caching_keys.outputs.cloned-owrt }}
      cache-hit: ${{ steps.restore_cache.outputs.cache-hit }}
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4

      - name: Prepare caching keys
        id: caching_keys
        run: |
          {
            echo "cloned-mtk=mtk-openwrt-feeds-${{ env.MTK_COMMIT_HASH }}"
            echo "cloned-owrt=openwrt-${{ env.OWRT_COMMIT_HASH }}"
            echo "buildroot=buildroot-${{ env.OWRT_COMMIT_HASH }}-${{ env.MTK_COMMIT_HASH }}-$(git rev-list HEAD -- "my_files/" | head -1)"
          } | tee -a $GITHUB_OUTPUT

      - name: Check if cache contains values
        id: restore_cache
        uses: actions/cache/restore@v4
        with:
          key: ${{ steps.caching_keys.outputs.buildroot }}
          path:
            mtk-openwrt-feeds/
            openwrt/

      # @TODO: resort to uploading artifact

  prepare-cache:
    runs-on: ubuntu-22.04
    needs: [check-cache]
    if: needs.check-cache.outputs.cache-hit != 'true'
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4

      - name: Install dependencies
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          echo "::group::Updating repositories"
          sudo apt update
          echo "::endgroup::"

          # echo "::group::Upgrading software"
          # sudo apt-mark hold firefox
          # sudo apt full-upgrade -y
          # echo "::endgroup::"

          echo "::group::Installing requirements"
          sudo apt install -y \
            build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
            python3-setuptools rsync swig unzip zlib1g-dev file wget libelf-dev
          echo "::endgroup::"

      #
      #
      #
      - name: Restore cloned MTK repository
        id: cloned-mtk-restore
        uses: actions/cache/restore@v4
        with:
          path: mtk-openwrt-feeds
          key: "${{ needs.check-cache.outputs.cloned-mtk }}"
  
      - name: Clone MTK OpenWrt feeds repository
        if: steps.cloned-mtk-restore.outputs.cache-hit != 'true'
        run: |
          git clone https://git01.mediatek.com/openwrt/feeds/mtk-openwrt-feeds mtk-openwrt-feeds \
            --single-branch --branch master
          cd mtk-openwrt-feeds
          git checkout ${{ env.MTK_COMMIT_HASH }}
  
      - name: Save cloned MTK OpenWRT cache
        if: steps.cloned-mtk-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: mtk-openwrt-feeds
          key: "${{ needs.check-cache.outputs.cloned-mtk }}"

      #
      #
      #
      - name: Restore cloned OpenWRT base repository
        id: cloned-owrt-restore
        uses: actions/cache/restore@v4
        with:
          path: openwrt
          key: "${{ needs.check-cache.outputs.cloned-owrt }}"

      - name: Clone OpenWRT base repository
        if: steps.cloned-mtk-restore.outputs.cache-hit != 'true'
        run: |
          git clone https://git.openwrt.org/openwrt/openwrt.git openwrt \
            --single-branch --branch openwrt-24.10
          cd openwrt
          git checkout ${{ env.OWRT_COMMIT_HASH }}
  
      - name: Save cloned OpenWRT base cache
        if: steps.cloned-mtk-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: openwrt
          key: "${{ needs.check-cache.outputs.cloned-owrt }}"

      #
      #
      #
      - name: Modify build environment
        run: |
          echo "::group::Remove existing patches"
          rm -rf openwrt/package/firmware/wireless-regdb/patches/*.*
          echo "::endgroup::"
  
          echo "::group::Copy regdb configuration"
          cp -r \
            my_files/500-tx_power.patch \
            mtk-openwrt-feeds/autobuild/unified/filogic/mac80211/24.10/files/package/firmware/wireless-regdb/patches
          echo "::endgroup::"
  
      - name: Apply MediaTek buildroot patches
        run: |
          if [ -n "$(ls -A my_files/mediatek_buildroot_patches/*.patch 2>/dev/null)" ]; then
            echo "Applying buildroot patches..."
            cd mtk-openwrt-feeds
            git apply --verbose ../my_files/mediatek_buildroot_patches/*.patch
          else
            echo "No buildroot patches found."
          fi
  
      - name: Add custom patches to MediaTek packages
        run: |
          echo "::group::Copy patches"
          rm -rf \
            mtk-openwrt-feeds/autobuild/unified/filogic/mac80211/24.10/files/package/firmware/wireless-regdb/patches/*.*
  
          cd my_files/mediatek_auto_patches
          cp -r \
            999-2709-net-ethernet-mtk_eth_soc-add-rss-lro-reg.patch \
            999-2710-net-ethernet-mtk_eth_soc-add-rss-support.patch \
            ../../mtk-openwrt-feeds/autobuild/unified/global/24.10/files/target/linux/mediatek/patches-6.6/
          cp -r \
            0006-arch-arm64-dts-mt7988a-add-adma-intrrupts.patch \
            ../../mtk-openwrt-feeds/autobuild/unified/global/24.10/patches-base/
          cp -r \
            999-3000-netfilter-add-bridging-support-to-xt_FLOWOFFLOAD.patch \
            ../../mtk-openwrt-feeds/autobuild/unified/filogic/mac80211/24.10/files/target/linux/mediatek/patches-6.6/
          cp -r \
            99999_tx_power_check.patch \
            ../../mtk-openwrt-feeds/autobuild/unified/filogic/mac80211/24.10/files/package/kernel/mt76/patches/
          echo "::endgroup::"
  
      - name: Modify OpenWRT build environment
        run: |
          echo "::group::Copy device trees"
          cd my_files/device_trees
          cp -r \
            mt7988a-rfb-spim-nand-nmbm.dtso \
            mt7981-rfb-spim-nor.dtso \
            mt7988d-rfb.dts \
            mt7988a-rfb-spidev.dtso \
            ../../openwrt/target/linux/mediatek/files-6.6/arch/arm64/boot/dts/mediatek/
          cd ../../
          echo "::endgroup::"
  
          echo "::group::Override some default files"
          cp -r \
            my_files/regdb.Makefile \
            openwrt/package/firmware/wireless-regdb/Makefile
          cp -r \
            my_files/ethtool/Makefile \
            openwrt/package/network/utils/ethtool/Makefile
          echo "::endgroup::"
    
      - name: Run autobuild script
        run: |
          cd openwrt
          bash ../mtk-openwrt-feeds/autobuild/unified/autobuild.sh filogic-mac80211-bpi-r4 log_file=make
          cp -r \
            ../my_files/device_trees/w-mt7988a.dtsi \
            target/linux/mediatek/files-6.6/arch/arm64/boot/dts/mediatek/mt7988a.dtsi
  
      - name: Add additional package feeds
        run: |
          {
            echo "src-git modemfeed https://github.com/koshev-msk/modemfeed.git"
            echo "src-git luci-app-3ginfo-lite https://github.com/4IceG/luci-app-3ginfo-lite.git"
            echo "src-git luci-app-atinout-mod https://github.com/4IceG/luci-app-atinout-mod.git"
            echo "src-git luci-app-modemband https://github.com/4IceG/luci-app-modemband.git"
          } | tee -a openwrt/feeds.conf.default
  
      - name: Update and install feeds
        run: |
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Download dependencies
        run: cd openwrt && make download V=sc -j$(($(nproc)+1))

      - name: Save cache
        uses: actions/cache/save@v4
        with:
          key: ${{ needs.check-cache.outputs.buildroot }}
          path:
            mtk-openwrt-feeds/
            openwrt/

        # @TODO: resort to uploading artifact
    
  build:
    needs: [check-cache, prepare-cache]
    if: |
      always() &&
      needs.check-cache.result == 'success' &&
      (needs.prepare-cache.result == 'success' || needs.prepare-cache.result == 'skipped')

    runs-on: ubuntu-22.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "::group::Updating repositories"
        sudo apt update
        echo "::endgroup::"

        # echo "::group::Upgrading software"
        # sudo apt-mark hold firefox
        # sudo apt full-upgrade -y
        # echo "::endgroup::"

        echo "::group::Installing requirements"
        sudo apt install -y \
          build-essential clang flex bison g++ gawk \
          gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
          python3-setuptools rsync swig unzip zlib1g-dev file wget libelf-dev
        echo "::endgroup::"

    - name: Restore cached buildroot
      uses: actions/cache/restore@v4
      with:
        path: mtk-openwrt-feeds
        key: "${{ needs.check-cache.outputs.buildroot }}"

    # @TODO: it may fail here if the dependencies are larger than 5GB
    # @TODO: add check to not countinue if cache hit is false

    - name: Copy base config file
      run: |
        cat configs/${{ env.BASE_CONFIG }} configs/${{ env.APPEND_CONFIG }} > openwrt/.config
        cd openwrt
        make defconfig

    - name: Download dependencies
      run: cd openwrt && make download V=sc -j$(($(nproc)+1))

    - name: Build the firmware image (multicore, unverbose)
      id: build_multiple_cores
      run: cd openwrt && make world -j$(($(nproc)+1))

    - name: Build the firmware image (single core, unverbose)
      if: failure() && steps.build_multiple_cores.conclusion == 'failure'
      id: build_single_core
      run: cd openwrt && make world V=sc -j1

    - name: Build the firmware image (single core, verbose)
      if: failure() && steps.build_single_core.conclusion == 'failure'
      id: pin_down_error
      run: cd openwrt && make world V=sc -j1 | tee build_error.log

    - name: Upload error log as artifact
      if: failure() && steps.pin_down_error.conclusion == 'failure'
      uses: actions/upload-artifact@v4
      with:
        name: build-error-{{ matrix.variation }}
        path: openwrt/build_error.log

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: bpi-r4-images
        path: openwrt/bin/targets/mediatek/filogic
        if-no-files-found: 'error'